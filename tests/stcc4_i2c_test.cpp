/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 1.2.0
 * Product:       stcc4
 * Model-Version: 3.2.0
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "stcc4_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

TEST_GROUP (STCC4_Tests) {
    void setup() {
        stcc4_init(0x64);
    }
};

TEST (STCC4_Tests, test_get_product_id1) {
    int16_t local_error = 0;
    uint32_t product_id = 0;
    uint64_t serial_number = 0;
    local_error = stcc4_get_product_id(&product_id, &serial_number);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_product_id");
    printf("product_id: %u ", product_id);
    printf("serial_number: %" PRIx64 "\n", serial_number);
}

TEST (STCC4_Tests, test_set_rht_compensation1) {
    int16_t local_error = 0;
    local_error = stcc4_set_rht_compensation(26214, 29359);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_rht_compensation");
}

TEST (STCC4_Tests, test_set_pressure_compensation1) {
    int16_t local_error = 0;
    local_error = stcc4_set_pressure_compensation(101300);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_pressure_compensation");
}

TEST (STCC4_Tests, test_set_pressure_compensation_raw1) {
    int16_t local_error = 0;
    local_error = stcc4_set_pressure_compensation_raw(50650);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_pressure_compensation_raw");
}

TEST (STCC4_Tests, test_perform_self_test1) {
    int16_t local_error = 0;
    uint16_t test_result = 0;
    local_error = stcc4_perform_self_test(&test_result);
    CHECK_EQUAL_ZERO_TEXT(local_error, "perform_self_test");
    printf("test_result: %u\n", test_result);
}

TEST (STCC4_Tests, test_perform_conditioning1) {
    int16_t local_error = 0;
    local_error = stcc4_perform_conditioning();
    CHECK_EQUAL_ZERO_TEXT(local_error, "perform_conditioning");
}

TEST (STCC4_Tests, test_stop_continuous_measurement1) {
    int16_t local_error = 0;
    local_error = stcc4_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}

TEST (STCC4_Tests, test_reinit1) {
    int16_t local_error = 0;
    local_error = stcc4_reinit();
    CHECK_EQUAL_ZERO_TEXT(local_error, "reinit");
}

TEST (STCC4_Tests, test_start_continuous_measurement1) {
    int16_t local_error = 0;
    int16_t co2_concentration_raw = 0;
    uint16_t temperature_raw = 0;
    uint16_t relative_humidity_raw = 0;
    uint16_t sensor_status_raw = 0;
    local_error = stcc4_start_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_continuous_measurement");
    local_error =
        stcc4_read_measurement_raw(&co2_concentration_raw, &temperature_raw,
                                   &relative_humidity_raw, &sensor_status_raw);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_raw");
    printf("co2_concentration_raw: %i ", co2_concentration_raw);
    printf("temperature_raw: %u ", temperature_raw);
    printf("relative_humidity_raw: %u ", relative_humidity_raw);
    printf("sensor_status_raw: %u\n", sensor_status_raw);
    local_error = stcc4_set_rht_compensation(26214, 29359);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_rht_compensation");
    local_error = stcc4_set_pressure_compensation(101300);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_pressure_compensation");
    local_error = stcc4_set_pressure_compensation_raw(50650);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_pressure_compensation_raw");
    local_error = stcc4_stop_continuous_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_continuous_measurement");
}
